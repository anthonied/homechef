
@{
    ViewBag.Title = "Registration";
}
<style>
    .validationMessage {
        color: #f00;
    }

    .customMessage {
        color: #FFA500;
    }
</style>
<h2>Update Chef Details</h2>
<div id="chefregistration">
    <form onsubmit="return false">
        <div class="form-group">
            <label>First Name</label>
            <input type="text" class="form-control" placeholder="First Name" data-bind="value: firstname">
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <input type="text" class="form-control" placeholder="Last Name" data-bind="value: lastname">
        </div>
        <div class="form-group">
            <label>ID Number or Passport Number </label>
            <input type="text" class="form-control" placeholder="ID Number" data-bind="value: idnumber">
        </div>
        <div class="form-group">
            <label>Age</label>
            <input type="text" class="form-control" placeholder="Age" data-bind="value: age">
        </div>

        <div class="form-group">
            <label>Sex</label>
            <input type="radio" name="checkgender" value="Female" data-bind="checked:sex " />Female
            <input type="radio" name="checkgender" value="Male" data-bind="checked:sex" />Male
        </div>
        <div class="form-group">
            <label>Mobile Number</label>
            <input type="text" class="form-control" placeholder="Mobile Number" data-bind="value: mobile">
        </div>
        <div class="form-group">
            <label>Street Name</label>
            <input type="text" class="form-control" placeholder="Street Name" data-bind="value: streetname">
        </div>
        <div class="form-group">
            <label>Suburb</label>
            <input type="text" class="form-control" placeholder="Suburb" data-bind="value: suburb">
        </div>
        <div class="form-group">
            <label>City</label>
            <input type="text" class="form-control" placeholder="City" data-bind="value: city">
        </div>
        <div class="form-group">
            <label>Province</label>
            <input type="text" class="form-control" placeholder="Province" data-bind="value: province">
        </div>
        <div class="form-group">
            <label>postalcode</label>
            <input type="text" class="form-control" placeholder="Postal Code" data-bind="value: postalcode">
        </div>
        <div class="form-group">
            <label>Country</label>
            <input type="text" class="form-control" placeholder="Country" data-bind="value: country">
        </div>
        <div class="form-group">
            <label>Chef Picture</label>
            <input type="text" class="form-control" placeholder="Chef Picture" data-bind="value: chefpicture">
        </div>
        <div class="form-group">
            <label>Chef Description</label>
            <input type="text" class="form-control" placeholder="Description" data-bind="value: description">
        </div>

        <button data-bind="click: submit" class="btn btn-default">Submit</button>
    </form>

</div>
@section scripts
{
    <script>

        ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                messageTemplate: null
            },
            true);
        var model = @Html.Raw(Json.Encode(Model));
        var id = model.Id;
        var ChefRegistrationViewModel = function() {
            var self = this;
           self.id = id;
            self.firstname = ko.observable(model.Firstname).extend({ required: true });
            self.lastname = ko.observable(model.Lastname).extend({ required: true });
            self.idnumber = ko.observable(model.Idnumber).extend({ required: true });
            self.age = ko.observable(model.Age)
                .extend({
                    required: true,
                    number: true
                });
            self.sex = ko.observable(model.Sex);
            self.mobile = ko.observable(model.Mobile)
                .extend({
                    required: true,
                    pattern: {
                        message: 'Invalid mobile number.',
                        params: /^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$/
                    }
                });
            self.streetname = ko.observable(model.Streetname).extend({ required: true });
            self.suburb = ko.observable(model.Suburb).extend({ required: true });
            self.city = ko.observable(model.City).extend({ required: true });
            self.province = ko.observable(model.Province).extend({ required: true });
            self.postalcode = ko.observable(model.Postalcode);
            self.country = ko.observable(model.Country).extend({ required: true });
            self.chefpicture = ko.observable("");
            self.description = ko.observable(model.description);

            self.submit = function() {
                console.log(self.errors());
                if (self.errors().length === 0) {
                    sendViewModelToController("Chef/Update",
                        ko.toJSON(self),
                        function(response) {
                            if (!response) {
                                alert("Please use another email..A chef  whith this email address already created");

                                return;
                            }
                            {
                                alert("Done");
                                changeLocation("Chef/Home", true);
                            }
                        });

                //         console.log("correct");
            } else
            {
                //     console.log("not valid");
                self.errors.showAllMessages();
            }
        };
    }

        var viewModel = new ChefRegistrationViewModel();
        viewModel.errors = ko.validation.group(viewModel);
        ko.applyBindings(viewModel,
            document.getElementById("chefregistration"));

    </script>

}

